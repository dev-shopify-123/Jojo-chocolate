<section class="drawer" id="drawer-name" data-drawer-target>
  <div class="drawer__overlay" data-drawer-close tabindex="-1"></div>
  <div class="drawer__wrapper">
    <div class="drawer__header">
      <div class="drawer__title">
        <a href="/cart">
            <span class="fas fa-shopping-bag" aria-hidden="true"></span>
            Your cart
          </a>
      </div>
      <button class="drawer__close" data-drawer-close aria-label="Close Drawer"></button>
    </div>
    <div class="drawer__content" id="cart__drawer">
      <div id="cart__drawer_items">
      </div>
      <div style="margin-top: 50px" class="footerDrawer">
        <h4>Subtotal: <span id="cart__total_price"></span></h4>
        <p>Taxes and shipping calculated at checkout</p>
        <a id="cart__checkout_btn" href="/checkout" class="btn btn--has-icon-after cart__continue-btn" style="width:100%;"><i class="fas fa-lock"></i> Checkout</a>
      </div>
    </div>
  </div>
</section>


<script>
  var Shopify = Shopify || {};
// ---------------------------------------------------------------------------
// Money format handler
// ---------------------------------------------------------------------------
Shopify.money_format = "${{amount}}";
Shopify.formatMoney = function(cents, format) {
  if (typeof cents == 'string') { cents = cents.replace('.',''); }
  var value = '';
  var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
  var formatString = (format || this.money_format);

  function defaultOption(opt, def) {
     return (typeof opt == 'undefined' ? def : opt);
  }

  function formatWithDelimiters(number, precision, thousands, decimal) {
    precision = defaultOption(precision, 2);
    thousands = defaultOption(thousands, ',');
    decimal   = defaultOption(decimal, '.');

    if (isNaN(number) || number == null) { return 0; }

    number = (number/100.0).toFixed(precision);

    var parts   = number.split('.'),
        dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
        cents   = parts[1] ? (decimal + parts[1]) : '';

    return dollars + cents;
  }

  switch(formatString.match(placeholderRegex)[1]) {
    case 'amount':
      value = formatWithDelimiters(cents, 2);
      break;
    case 'amount_no_decimals':
      value = formatWithDelimiters(cents, 0);
      break;
    case 'amount_with_comma_separator':
      value = formatWithDelimiters(cents, 2, '.', ',');
      break;
    case 'amount_no_decimals_with_comma_separator':
      value = formatWithDelimiters(cents, 0, '.', ',');
      break;
  }

  return formatString.replace(placeholderRegex, value);
};
   var total = 0;
      $("#cart__drawer_items").html("");
  fetch('/cart.js')
  .then((resp) => resp.json())
  .then((data) => {
    data.items.forEach(function(product, index) { 
    var html = '<div class="row">';
    html+= '<div class="col-md-3">';
        html+= '<a href="'+product.url+'"><img class="media-object" src="'+product.featured_image.url+'"></a>';
    html+= '</div>';
    html+= '<div class="col-md-8">';
      	html+= '<h4 class="media-heading">'+product.product_title+'</h4>';
      	html+= '<div class="pull-left">';
            html+= '<a href="javascript:void(0)" onclick="CustomQtyplus('+product.quantity+', '+product.id+')">';
                html+= '<i class="fas fa-plus"></i>';
            html+= '</a>';
            html+= '<span class="quantity">'+product.quantity+'</span>';
            html+= '<a href="javascript:void(0)" onclick="CustomQtyminus('+product.quantity+', '+product.id+')">';
                html+= '<i class="fas fa-minus"></i>';
            html+= '</a>';
        html+= '</div>';
        html+= '<div class="pull-right text-right">';
           html+= "<span>"+Shopify.formatMoney(product.final_line_price)+"</span>";
        html+= '</div>';
    html+= '</div>';
html+= '</div>';
      total = total + product.discounted_price;
      $("#cart__drawer_items").append(html);
    });
    $("#cart__total_price").html(Shopify.formatMoney(data.total_price));
  });
</script>